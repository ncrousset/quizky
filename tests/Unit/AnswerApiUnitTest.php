<?php

namespace Tests\Unit;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class AnswerApiUnitTest extends TestCase
{
    protected $response;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->response = $this->actingAs($this->user, 'api');
    }


    /**
     * @param int $quantity
     * @return mixed
     */
    public function createAnswer(int $quantity = 1)
    {
        return factory(\App\Models\Answer::class, $quantity)
            ->create([
                'question_id' => factory(\App\Models\Question::class)->create()->id
            ]);
    }

    public function createQuetion()
    {
        return factory(\App\Models\Question::class)->create();
    }

    public function testCreate(): void
    {
        $question =  $this->createQuetion();

        $data = [
            'question_id' => $question->id,
            'description' => $this->faker->realText(15),
            'is_valid' => true];

        $this->response
            ->json('POST', '/api/answers', $data)
            ->assertStatus(201)
            ->assertJson([
                'created' => true,
                'id' => true
            ]);
    }

    public function testCreateErrorValidation(): void
    {
        $data = [
//            'question_id' => $this->createQuetion()->id,
            'is_valid' => true];

        $this->response
            ->json('POST', '/api/answers', $data)
            ->assertStatus(422)
            ->assertJsonStructure(['message', 'errors'])
            ->assertJson([
                'errors' => [
                    'description' => ['The description field is required.']
                ]
            ]);
    }

//    public function testIndex(): void
//    {
//        $this->createQuestions(10);
//
//        $this->response
//            ->json('GET', '/api/questions')
//            ->assertStatus(200)
//            ->assertJsonStructure([
//                'data' =>[['id', 'description', 'type', 'is_actived']],
//            ]);
//    }

//    public function testShow(): void
//    {
//        $this->createQuestions(1);
//
//        $this->response
//            ->json('GET', '/api/questions/1')
//            ->assertStatus(200)
//            ->assertJsonStructure(['id', 'description', 'type', 'is_actived']);
//    }

//    public function testShowNotElement(): void
//    {
//        $this->response
//            ->json('GET', '/api/questions/1')
//            ->assertStatus(404);
//    }

//    public function testUpdate(): void
//    {
//        $question = $this->createQuestions(1)[0];
//
//        $data = [
//            'description' => $this->faker->title,
//            'type' => 'radio'];
//
//        $this->response
//            ->json('PUT', '/api/questions/'.$question->id, $data)
//            ->assertStatus(200)
//            ->assertJsonStructure(['id', 'description', 'type', 'is_actived']);
//    }

//    public function testUpdateNotElement(): void
//    {
//        $data = [
//            'description' => $this->faker->title,
//            'type' => 'radio'];
//
//        $this->response
//            ->json('PUT', '/api/questions/1', $data)
//            ->assertStatus(404);
//    }

//    public function testStoreErrorValidation(): void
//    {
//        $data = ['type' => 'check'];
//
//        $this->response
//            ->json('POST', '/api/questions', $data)
//            ->assertStatus(422)
//            ->assertJsonStructure(['message', 'errors'])
//            ->assertJson([
//                'errors' => [
//                    'description' => ['The description field is required.']
//                ]
//            ]);
//    }

//    public function testUpdateErrorValidation(): void
//    {
//        $question = $this->createQuestions(1)[0];
//
//        $data = ['type' => 'check'];
//
//        $this->response
//            ->json('PUT', '/api/questions/'.$question->id, $data)
//            ->assertStatus(422)
//            ->assertJsonStructure(['message', 'errors'])
//            ->assertJson([
//                'errors' => [
//                    'description' => ['The description field is required.']
//                ]
//            ]);
//    }
}
