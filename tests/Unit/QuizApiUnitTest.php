<?php

namespace Tests\Unit;

use App\Models\Quiz;
use Tests\TestCase;

class QuizApiUnitTest extends TestCase
{

    protected $response;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->response = $this->actingAs($this->user, 'api');
    }

    /**
     * @param int $quantity
     * @return mixed
     */
    public function createQuizzes(int $quantity = 1)
    {
        return factory(\App\Models\Quiz::class, $quantity)->create();
    }

    public function testCreate(): void
    {
        $data = [
            'title' => $this->faker->title,
            'public' => rand(0,1)];

        $response = $this->response
            ->json('POST', '/api/quizzes', $data)
            ->assertStatus(201)
            ->assertJson([
                'created' => true,
                'id' => true
            ]);
    }

    public function testIndex(): void
    {
        $this->createQuizzes(10);

        $this->response
            ->json('GET', '/api/quizzes')
            ->assertStatus(200)
            ->assertJsonStructure([
                'data' =>[['id', 'title', 'public', 'questions']],
            ]);
    }

    public function testShow(): void
    {
        $this->createQuizzes(1);

        $this->response
            ->json('GET', '/api/quizzes/1')
            ->assertStatus(200)
            ->assertJsonStructure(['id', 'title', 'public', 'questions']);
    }

    public function testShowNotElement(): void
    {
        $this->response
            ->json('GET', '/api/quizzes/1')
            ->assertStatus(404);
    }

    public function testUpdate(): void
    {
        $quiz = $this->createQuizzes(1)[0];

        $data = [
            'title' => $this->faker->title,
            'public' => rand(0,1)];

        $this->response
            ->json('PUT', '/api/quizzes/'.$quiz->id, $data)
            ->assertStatus(200)
            ->assertJsonStructure(['title', 'id', 'public']);
    }

    public function testUpdateNotElement(): void
    {
        $data = [
            'title' => $this->faker->title,
            'public' => rand(0,1)];

        $this->response
            ->json('PUT', '/api/quizzes/1', $data)
            ->assertStatus(404);
    }

    public function testStoreErrorValidation(): void
    {
        $data = ['public' => rand(0,1)];

        $this->response
            ->json('POST', '/api/quizzes', $data)
            ->assertStatus(422)
            ->assertJsonStructure(['message', 'errors'])
            ->assertJson([
                'errors' => [
                    'title' => ['The title field is required.']
                ]
            ]);

        $quiz = $this->createQuizzes()[0];
        $data['title'] = $quiz->title;
        $this->response
            ->json('POST', '/api/quizzes', $data)
            ->assertStatus(422)
            ->assertJsonStructure(['message', 'errors'])
            ->assertJson([
                'errors' => [
                    'title' => ['The title has already been taken.']
                ]
            ]);
    }

    public function testUpdateErrorValidation(): void
    {
        $quiz = $this->createQuizzes(1)[0];

        $data = ['public' => rand(0,1)];

        $this->response
            ->json('PUT', '/api/quizzes/'.$quiz->id, $data)
            ->assertStatus(422)
            ->assertJsonStructure(['message', 'errors'])
            ->assertJson([
                'errors' => [
                    'title' => ['The title field is required.']
                ]
            ]);


        $this->createQuizzes(1)[0];
        $data['title'] = $quiz->title;

        $this->response
            ->json('PUT', '/api/quizzes/2', $data)
            ->assertStatus(422)
            ->assertJsonStructure(['message', 'errors'])
            ->assertJson([
                'errors' => [
                    'title' => ['The title has already been taken.']
                ]
            ]);
    }


//
//    public function testDelete()
//    {
//
//    }

}
